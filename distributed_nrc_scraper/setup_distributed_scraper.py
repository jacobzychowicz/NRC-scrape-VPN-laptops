#!/usr/bin/env python3
"""
Setup script for Distributed NRC Scraper
This script helps configure the scraper for different laptops.
"""

import os
import sys
import json
import shutil
from pathlib import Path

def get_user_input(prompt, default=None, required=True):
    """Get user input with optional default value"""
    while True:
        if default:
            user_input = input(f"{prompt} [{default}]: ").strip()
            if not user_input:
                user_input = default
        else:
            user_input = input(f"{prompt}: ").strip()
        
        if user_input or not required:
            return user_input
        else:
            print("This field is required. Please enter a value.")

def setup_laptop_config():
    """Setup configuration for a specific laptop"""
    print("=" * 60)
    print("DISTRIBUTED NRC SCRAPER SETUP")
    print("=" * 60)
    
    # Get laptop information
    laptop_id = get_user_input("Enter unique laptop ID", "laptop1")
    
    print(f"\nConfiguring laptop: {laptop_id}")
    
    # VPN configuration
    print("\n--- VPN Configuration ---")
    vpn_types = ["manual", "nordvpn", "expressvpn", "protonvpn"]
    vpn_type = get_user_input(
        "Select VPN type",
        "manual",
        required=False
    )
    
    if vpn_type not in vpn_types:
        print(f"Invalid VPN type. Using 'manual'")
        vpn_type = "manual"
    
    vpn_email = None
    vpn_password = None
    
    if vpn_type == "protonvpn":
        vpn_email = get_user_input("Enter ProtonVPN email", required=False)
        vpn_password = get_user_input("Enter ProtonVPN password", required=False)
    
    # Coordination file setup
    print("\n--- Coordination File Setup ---")
    print("Choose how to share the coordination file between laptops:")
    print("1. Network drive (recommended)")
    print("2. Cloud sync (Dropbox/OneDrive)")
    print("3. USB drive")
    print("4. Local file (manual sync)")
    
    coord_choice = get_user_input("Enter choice (1-4)", "4")
    
    if coord_choice == "1":
        coord_file = get_user_input("Enter network path", "\\\\server\\share\\nrc_scraper\\distributed_coordination.json")
    elif coord_choice == "2":
        coord_file = get_user_input("Enter cloud sync path", "C:\\Users\\Username\\Dropbox\\nrc_scraper\\distributed_coordination.json")
    elif coord_choice == "3":
        coord_file = get_user_input("Enter USB drive path", "E:\\nrc_scraper\\distributed_coordination.json")
    else:
        coord_file = "distributed_coordination.json"
    
    # Create configuration
    config = {
        'laptop_id': laptop_id,
        'output_dir': f"nrc_downloads_{laptop_id}",
        'coordination_file': coord_file,
        'sync_interval': 30,
        'vpn_type': vpn_type,
        'vpn_locations': ['Canada', 'United States', 'United Kingdom', 'Germany', 'Netherlands'],
        'vpn_email': vpn_email,
        'vpn_password': vpn_password,
        'base_url': "https://nrc.canada.ca",
        'max_depth': 3,
        'request_timeout': 30,
        'request_delay': 1,
        'max_consecutive_errors': 3,
        'max_vpn_switches': 10,
        'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'log_level': "INFO",
        'save_progress_interval': 10
    }
    
    return config

def create_config_file(config):
    """Create the configuration file"""
    config_content = f'''#!/usr/bin/env python3
"""
Configuration file for Distributed NRC Scraper
Generated by setup script for {config['laptop_id']}
"""

# LAPTOP CONFIGURATION
LAPTOP_ID = "{config['laptop_id']}"
OUTPUT_DIR = "{config['output_dir']}"

# COORDINATION SETUP
COORDINATION_FILE = "{config['coordination_file']}"
SYNC_INTERVAL = {config['sync_interval']}

# VPN CONFIGURATION
VPN_TYPE = "{config['vpn_type']}"
VPN_LOCATIONS = {config['vpn_locations']}
VPN_EMAIL = {repr(config['vpn_email'])}
VPN_PASSWORD = {repr(config['vpn_password'])}

# SCRAPING CONFIGURATION
BASE_URL = "{config['base_url']}"
MAX_DEPTH = {config['max_depth']}
REQUEST_TIMEOUT = {config['request_timeout']}
REQUEST_DELAY = {config['request_delay']}
MAX_CONSECUTIVE_ERRORS = {config['max_consecutive_errors']}
MAX_VPN_SWITCHES = {config['max_vpn_switches']}

# ADVANCED SETTINGS
USER_AGENT = "{config['user_agent']}"
LOG_LEVEL = "{config['log_level']}"
SAVE_PROGRESS_INTERVAL = {config['save_progress_interval']}

# LAPTOP-SPECIFIC OVERRIDES
LAPTOP_OVERRIDES = {{
    "{config['laptop_id']}": {{
        # Add {config['laptop_id']}-specific settings here
    }}
}}

def get_config():
    """Get configuration with laptop-specific overrides"""
    config = {{
        'laptop_id': LAPTOP_ID,
        'output_dir': OUTPUT_DIR,
        'coordination_file': COORDINATION_FILE,
        'sync_interval': SYNC_INTERVAL,
        'vpn_type': VPN_TYPE,
        'vpn_locations': VPN_LOCATIONS,
        'vpn_email': VPN_EMAIL,
        'vpn_password': VPN_PASSWORD,
        'base_url': BASE_URL,
        'max_depth': MAX_DEPTH,
        'request_timeout': REQUEST_TIMEOUT,
        'request_delay': REQUEST_DELAY,
        'max_consecutive_errors': MAX_CONSECUTIVE_ERRORS,
        'max_vpn_switches': MAX_VPN_SWITCHES,
        'user_agent': USER_AGENT,
        'log_level': LOG_LEVEL,
        'save_progress_interval': SAVE_PROGRESS_INTERVAL
    }}
    
    # Apply laptop-specific overrides
    if LAPTOP_ID in LAPTOP_OVERRIDES:
        config.update(LAPTOP_OVERRIDES[LAPTOP_ID])
    
    return config
'''
    
    with open('distributed_config.py', 'w') as f:
        f.write(config_content)
    
    print(f"Configuration file created: distributed_config.py")

def create_batch_file(config):
    """Create a batch file for easy running on Windows"""
    batch_content = f'''@echo off
echo Starting Distributed NRC Scraper on {config['laptop_id']}
echo.
python run_distributed_scraper_config.py
pause
'''
    
    batch_filename = f"run_scraper_{config['laptop_id']}.bat"
    with open(batch_filename, 'w') as f:
        f.write(batch_content)
    
    print(f"Batch file created: {batch_filename}")

def create_readme(config):
    """Create a README file for this laptop"""
    readme_content = f'''# Distributed NRC Scraper - {config['laptop_id']}

This laptop is configured to run the distributed NRC scraper.

## Configuration
- Laptop ID: {config['laptop_id']}
- Output Directory: {config['output_dir']}
- Coordination File: {config['coordination_file']}
- VPN Type: {config['vpn_type']}

## Running the Scraper

### Option 1: Using the batch file
Double-click: `run_scraper_{config['laptop_id']}.bat`

### Option 2: Using Python directly
```bash
python run_distributed_scraper_config.py
```

### Option 3: Using the simple runner
```bash
python run_distributed_scraper.py
```

## Coordination File Setup

The coordination file is located at: `{config['coordination_file']}`

Make sure this file is accessible by all laptops running the scraper.

## VPN Setup

VPN Type: {config['vpn_type']}

{f"Email: {config['vpn_email']}" if config['vpn_email'] else "No email configured"}

## Files Created
- Downloaded files: `{config['output_dir']}/`
- Log file: `nrc_scraper_{config['laptop_id']}.log`
- Progress file: `{config['output_dir']}/scraper_progress_{config['laptop_id']}.json`
- Coordination file: `{config['coordination_file']}`

## Troubleshooting

1. If you get VPN errors, check your VPN client configuration
2. If coordination fails, check the coordination file path
3. Check the log file for detailed error messages
'''
    
    readme_filename = f"README_{config['laptop_id']}.md"
    with open(readme_filename, 'w') as f:
        f.write(readme_content)
    
    print(f"README created: {readme_filename}")

def main():
    """Main setup function"""
    try:
        # Check if required files exist
        required_files = [
            'distributed_nrc_scraper.py',
            'vpn_config.py'
        ]
        
        missing_files = []
        for file in required_files:
            if not os.path.exists(file):
                missing_files.append(file)
        
        if missing_files:
            print("Error: Missing required files:")
            for file in missing_files:
                print(f"  - {file}")
            print("\nPlease make sure all scraper files are in the same directory.")
            return
        
        # Setup configuration
        config = setup_laptop_config()
        
        # Create files
        create_config_file(config)
        create_batch_file(config)
        create_readme(config)
        
        print("\n" + "=" * 60)
        print("SETUP COMPLETED SUCCESSFULLY!")
        print("=" * 60)
        print(f"Laptop {config['laptop_id']} is now configured.")
        print(f"\nTo start scraping, run:")
        print(f"  python run_distributed_scraper_config.py")
        print(f"  or double-click: run_scraper_{config['laptop_id']}.bat")
        print(f"\nMake sure to configure the other laptop(s) with different laptop IDs.")
        
    except KeyboardInterrupt:
        print("\nSetup cancelled by user.")
    except Exception as e:
        print(f"Error during setup: {e}")

if __name__ == "__main__":
    main() 